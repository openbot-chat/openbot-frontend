generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Account {
  id                        String                @id @default(cuid())
  userId                    String
  provider                  String
  providerAccountId         String
  refresh_token             String?
  access_token              String?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?
  session_state             String?
  oauth_token_secret        String?
  oauth_token               String?
  refresh_token_expires_in  Int?
  user                      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  image                   String?
  accounts                Account[]
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @default(now()) @updatedAt
  orgs                    OrgMember[]
  lastActivityAt          DateTime              @default(now())
}

model OrgMember {
  userId                  String
  orgId                   String
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  org                     Org                   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @default(now()) @updatedAt

  @@unique([userId, orgId])
}

model Org {
  id                      String                @id @default(cuid())
  name                    String                
  members                 OrgMember[]
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @default(now()) @updatedAt
}