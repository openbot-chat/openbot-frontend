import { NextRequest, NextResponse } from 'next/server'
// import { withAuth } from "next-auth/middleware"
// import { getToken } from "next-auth/jwt";


import acceptLanguage from 'accept-language'
import { fallbackLng, languages } from '@/lib/i18n'

acceptLanguage.languages(['zh', 'en']);

export const config = {
  // matcher: '/:lng*',
  matcher: ['/((?!api|_next/static|_next/image|assets|favicon.ico|sw.js).*)']
}

const cookieName = 'i18next'



// next 13 middleware 用了 edge runtime，等于是一个独立的 node runtime, 和 lib/api 的上下文不同
// 导致 getServerSession 内部依赖的很多模块都丢失，process.version 等也拿不到
export async function middleware(req: NextRequest) {
  /*const token = await getToken({
    req,
    secret: process.env.ENCRYPTION_SECRET,
  });
  const { token } = (req as any).nextauth as any;
  */

  if (req.nextUrl.pathname.indexOf('icon') > -1 || req.nextUrl.pathname.indexOf('chrome') > -1) return NextResponse.next();
  let lng;
  if (req.cookies.has(cookieName)) lng = acceptLanguage.get(req.cookies.get(cookieName)?.value);
  if (!lng) lng = acceptLanguage.get(req.headers.get('Accept-Language'));
  if (!lng) lng = fallbackLng;

  // Redirect if lng in path is not supported
  if (
    !languages.some(loc => req.nextUrl.pathname.startsWith(`/${loc}`)) &&
    !req.nextUrl.pathname.startsWith('/_next') &&
    !req.nextUrl.pathname.startsWith('/images/')
  ) {
    const newUrl = new URL(`/${lng}${req.nextUrl.pathname}`, req.url);
    if (newUrl.href !== req.url) {
      return NextResponse.redirect(newUrl)
    }
  }

  const refererHeader = req.headers.get('referer');
  if (refererHeader) {
    const refererUrl = new URL(refererHeader);
    const lngInReferer = languages.find((l) => refererUrl.pathname.startsWith(`/${l}`));
    const response = NextResponse.next();
    if (lngInReferer) response.cookies.set(cookieName, lngInReferer);
    return response;
  }

  return NextResponse.next();
}

/*
export default withAuth(
  middleware,
  {
    secret: process.env.ENCRYPTION_SECRET,
    callbacks: {
      authorized: async ({ req }) => {
        console.error('authorized: ');

        return true;
      },
    },
    pages: {
      signIn: "/auth/signin",
    }
  }
)*/